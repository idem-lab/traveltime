[{"path":"https://idem-lab.github.io/traveltime/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Gerry Ryan + traveltime authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://idem-lab.github.io/traveltime/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gerry Ryan. Author, maintainer. Daniel Weiss. Author. Nicholas Tierney. Contributor.","code":""},{"path":"https://idem-lab.github.io/traveltime/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ryan G, Weiss D (2024). traveltime: Calculate Travel Times Space. R package version 0.0.0.9000, https://idem-lab.github.io/traveltime/.","code":"@Manual{,   title = {traveltime: Calculate Travel Times Over Space},   author = {Gerry Ryan and Daniel Weiss},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://idem-lab.github.io/traveltime/}, }"},{"path":"https://idem-lab.github.io/traveltime/index.html","id":"traveltime","dir":"","previous_headings":"","what":"Calculate Travel Times Over Space","title":"Calculate Travel Times Over Space","text":"Implements methods Weiss et al. 2018, 2020 calculate travel time given locations friction surface. Citations: D. J. Weiss, . Nelson, C. . Vargas-Ruiz, K. Gligoric, S., Bavadekar, E. Gabrilovich, . Bertozzi-Villa, J. Rozier, H. S. Gibson, T., Shekel, C. Kamath, . Lieber, K. Schulman, Y. Shao, V. Qarkaxhija, . K. Nandi, S. H. Keddie, S. Rumisha, P. Amratia, R. Arambepola, E. G. Chestnutt, J. J. Millar, T. L. Symons, E. Cameron, K. E. Battle, S. Bhatt, P. W. Gething. Global maps travel time healthcare facilities. (2020) Nature Medicine. https://doi.org/10.1038/s41591-020-1059-1 D. J. Weiss, . Nelson, H.S. Gibson, W. Temperley, S. Peedell, . Lieber, M. Hancher, E. Poyart, S. Belchior, N. Fullman, B. Mappin, U. Dalrymple, J. Rozier, T.C.D. Lucas, R.E. Howes, L.S. Tusting, S.Y. Kang, E. Cameron, D. Bisanzio, K.E. Battle, S. Bhatt, P.W. Gething. global map travel time cities assess inequalities accessibility 2015. (2018). Nature. https://doi.org/10.1038/nature25181","code":""},{"path":"https://idem-lab.github.io/traveltime/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate Travel Times Over Space","text":"can install traveltime :","code":"install.packages(\"traveltime\", repos = c(\"https://idem-lab.r-universe.dev\"))"},{"path":"https://idem-lab.github.io/traveltime/index.html","id":"lets-calculate-some-travel-times","dir":"","previous_headings":"","what":"Let’s calculate some travel times","title":"Calculate Travel Times Over Space","text":"First download friction surface –— using motorised travel time Weiss et al. 2020. use function traveltime::get_friction_surface, specify surface (type) \"motor2020\", provide spatial extent interest: Let’s look SpatRaster:  Now, prepare points like calculate travel time : calculate travel time points from_here friction surface friction_surface using function traveltime::calculate_travel_time: Et voila! motorised travel time minutes cell, points pink.","code":"library(traveltime) library(terra) #> terra 1.7.83  friction_surface <- get_friction_surface(     surface = \"motor2020\",     extent = c(111,112,0,1)   ) #> Checking if the following Surface-Year combinations are available to download: #>  #>     DATASET ID  YEAR #>   - Explorer__2020_motorized_friction_surface:  DEFAULT #>  #> Loading required package: sf #> Linking to GEOS 3.12.1, GDAL 3.9.0, PROJ 9.4.0; sf_use_s2() is FALSE #> <GMLEnvelope> #> ....|-- lowerCorner: 0 111 #> ....|-- upperCorner: 1 112 friction_surface #> class       : SpatRaster  #> dimensions  : 120, 120, 1  (nrow, ncol, nlyr) #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 111, 112, 1.387779e-17, 1  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source      : Explorer__2020_motorized_friction_surface_0,111,1,112.tif  #> name        : friction_surface plot(friction_surface) from_here <- tibble::tibble(   x = c(111.2, 111.9),   y = c(0.2, 0.35) ) from_here #> # A tibble: 2 × 2 #>       x     y #>   <dbl> <dbl> #> 1  111.  0.2  #> 2  112.  0.35 travel_time <- calculate_travel_time(   friction_surface = friction_surface,   points = from_here ) travel_time #> class       : SpatRaster  #> dimensions  : 120, 120, 1  (nrow, ncol, nlyr) #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 111, 112, 1.387779e-17, 1  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : travel_time  #> min value   :      0.0000  #> max value   :    582.1882 plot(travel_time) points(from_here, pch = 19, col = \"hotpink\")"},{"path":"https://idem-lab.github.io/traveltime/index.html","id":"a-more-tangible-example-walking-in-singapore","dir":"","previous_headings":"","what":"A more tangible example: Walking in Singapore","title":"Calculate Travel Times Over Space","text":"Let’s create map walking time across island Singapore nearest MRT LRT station. , need: map Singapore locations stations ’s basemap via geodata:  ’re going see long takes walk home station, ’ll download walking-friction surface time specifying surface = \"walk2020. can also pass basemap sin, SpatVector, directly extent, instead specifying hand . ’re also interested walking land mask areas outside sin, within extent raster: stations data set package contains longitude latitude LRT MRT station exits Singapore1. Let’s look data now. plot friction surface raster friction_singapore, vector boundary sin dashed grey line, stations grey points:  OK, now want calculate walking travel time minutes across friction surface nearest station exit: Et voilah — raster walking time nearest station.","code":"#install.packages(\"geodata\") library(geodata) sin <- gadm(   country = \"Singapore\",   level = 0,   path = tempdir(),   resolution = 2 ) plot(sin) library(traveltime) library(terra)  friction_singapore <- get_friction_surface(     surface = \"walk2020\",     extent = sin   )|>    mask(sin) #> Checking if the following Surface-Year combinations are available to download: #>  #>     DATASET ID  YEAR #>   - Explorer__2020_walking_only_friction_surface:  DEFAULT #>  #> <GMLEnvelope> #> ....|-- lowerCorner: 1.1664 103.6091 #> ....|-- upperCorner: 1.4714 104.0858  friction_singapore #> class       : SpatRaster  #> dimensions  : 37, 57, 1  (nrow, ncol, nlyr) #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 103.6083, 104.0833, 1.166667, 1.475  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory #> varname     : Explorer__2020_walking_only_friction_surface_1.1664,103.6091,1.4714,104.0858  #> name        : friction_surface  #> min value   :       0.01200000  #> max value   :       0.06192715 head(stations) #>             x        y #> [1,] 103.9091 1.334922 #> [2,] 103.9335 1.336555 #> [3,] 103.8493 1.297699 #> [4,] 103.8508 1.299195 #> [5,] 103.9094 1.335311 #> [6,] 103.9389 1.344999 library(tidyterra) #> Registered S3 method overwritten by 'tidyterra': #>   method              from         #>   autoplot.SpatRaster malariaAtlas #>  #> Attaching package: 'tidyterra' #> The following object is masked from 'package:stats': #>  #>     filter library(ggplot2)  ggplot() +   geom_spatraster(     data = friction_singapore   ) +   geom_spatvector(     data = sin,     fill = \"transparent\",     col = \"grey50\",     lty = 2   ) +   geom_point(     data = stations,     aes(       x = x,       y = y     ),     col = \"grey60\",     size = 0.5   ) +   scale_fill_viridis_c(     option = \"A\",     na.value = \"transparent\",     direction = -1   ) +   labs(     fill = \"Friction\"   ) travel_time_sin <- calculate_travel_time(   friction_surface = friction_singapore,   points = stations ) travel_time_sin #> class       : SpatRaster  #> dimensions  : 37, 57, 1  (nrow, ncol, nlyr) #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 103.6083, 104.0833, 1.166667, 1.475  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : travel_time  #> min value   :           0  #> max value   :         Inf contour(   x = travel_time_sin,   filled = TRUE,   nlevels = 20,   col = viridis::magma(19, direction = -1) )"},{"path":"https://idem-lab.github.io/traveltime/reference/calculate_travel_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate travel time — calculate_travel_time","title":"Calculate travel time — calculate_travel_time","text":"Calculate travel time set points friction surface.","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/calculate_travel_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate travel time — calculate_travel_time","text":"","code":"calculate_travel_time(   friction_surface,   points,   filename = NULL,   overwrite = FALSE )"},{"path":"https://idem-lab.github.io/traveltime/reference/calculate_travel_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate travel time — calculate_travel_time","text":"friction_surface SpatRaster friction surface layer. See ?get_friction_surface points two-column matrix, data.frame, tibble longitude (x) first column latitude (y) second, SpatVector, coordinate, reference system friction_surface. filename character. Output file name extension suitable terra::writeRaster overwrite logical. TRUE filename overwritten.","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/calculate_travel_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate travel time — calculate_travel_time","text":"SpatRaster","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/calculate_travel_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate travel time — calculate_travel_time","text":"Implements methods Weiss et al. 2018, 2020 calculate travel time given locations friction surface. large areas function can require significant RAM slow. Citations: D. J. Weiss, . Nelson, C. . Vargas-Ruiz, K. Gligoric, S., Bavadekar, E. Gabrilovich, . Bertozzi-Villa, J. Rozier, H. S. Gibson, T., Shekel, C. Kamath, . Lieber, K. Schulman, Y. Shao, V. Qarkaxhija, . K. Nandi, S. H. Keddie, S. Rumisha, P. Amratia, R. Arambepola, E. G. Chestnutt, J. J. Millar, T. L. Symons, E. Cameron, K. E. Battle, S. Bhatt, P. W. Gething. Global maps travel time healthcare facilities. (2020) Nature Medicine. https://doi.org/10.1038/s41591-020-1059-1 D. J. Weiss, . Nelson, H.S. Gibson, W. Temperley, S. Peedell, . Lieber, M. Hancher, E. Poyart, S. Belchior, N. Fullman, B. Mappin, U. Dalrymple, J. Rozier, T.C.D. Lucas, R.E. Howes, L.S. Tusting, S.Y. Kang, E. Cameron, D. Bisanzio, K.E. Battle, S. Bhatt, P.W. Gething. global map travel time cities assess inequalities accessibility 2015. (2018). Nature. doi:10.1038/nature25181.","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/calculate_travel_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate travel time — calculate_travel_time","text":"","code":"ext <- matrix(   data = c(\"111\", \"0\", \"112\", 1),   nrow = 2,   ncol = 2,   dimnames = list(     c(\"x\", \"y\"),     c(\"min\", \"max\")    )  )   friction_surface <- get_friction_surface(    surface = \"motor2020\",    extent = ext  ) #> Registered S3 methods overwritten by 'malariaAtlas': #>   method              from      #>   autoplot.SpatRaster tidyterra #>   autoplot.default    ggplot2   #> Checking if the following Surface-Year combinations are available to download: #>  #>     DATASET ID  YEAR  #>   - Explorer__2020_motorized_friction_surface:  DEFAULT  #>  #> Loading required package: sf #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is FALSE #> No encoding supplied: defaulting to UTF-8. #> <GMLEnvelope> #> ....|-- lowerCorner: 0 111 #> ....|-- upperCorner: 1 112Start tag expected, '<' not found   from_here <- data.frame(    x = c(111.2, 111.9),    y = c(0.2, 0.35)  )   calculate_travel_time(   friction_surface = friction_surface,   points = from_here  ) #> class       : SpatRaster  #> dimensions  : 120, 120, 1  (nrow, ncol, nlyr) #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 111, 112, 0, 1  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : travel_time  #> min value   :      0.0000  #> max value   :    582.1882"},{"path":"https://idem-lab.github.io/traveltime/reference/ext_from_terra.html","id":null,"dir":"Reference","previous_headings":"","what":"Extent from SpatRaster or SpatVector — ext_from_terra","title":"Extent from SpatRaster or SpatVector — ext_from_terra","text":"Formats spatial extent use get_friction_surface.","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/ext_from_terra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extent from SpatRaster or SpatVector — ext_from_terra","text":"","code":"ext_from_terra(r)"},{"path":"https://idem-lab.github.io/traveltime/reference/ext_from_terra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extent from SpatRaster or SpatVector — ext_from_terra","text":"r terra::SpatRaster terra::SpatVector","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/ext_from_terra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extent from SpatRaster or SpatVector — ext_from_terra","text":"2x2 matrix","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/ext_from_terra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extent from SpatRaster or SpatVector — ext_from_terra","text":"","code":"library(terra) #> terra 1.8.5 r <- terra::rast(     extent = terra::ext(c(111, 112, 0, 1))   )  ext_from_terra(r) #>   min max #> x 111 112 #> y   0   1"},{"path":"https://idem-lab.github.io/traveltime/reference/ext_vect_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Extent vector to matrix — ext_vect_to_matrix","title":"Extent vector to matrix — ext_vect_to_matrix","text":"Extent vector matrix","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/ext_vect_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extent vector to matrix — ext_vect_to_matrix","text":"","code":"ext_vect_to_matrix(x)"},{"path":"https://idem-lab.github.io/traveltime/reference/ext_vect_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extent vector to matrix — ext_vect_to_matrix","text":"x numeric length 4, consisting c(xmin, xmax, ymin, ymax) dimensions extent","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/ext_vect_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extent vector to matrix — ext_vect_to_matrix","text":"2x2 matrix","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/ext_vect_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extent vector to matrix — ext_vect_to_matrix","text":"","code":"ext_vect_to_matrix(c(111,112,0, 1)) #>   min max #> x 111 112 #> y   0   1"},{"path":"https://idem-lab.github.io/traveltime/reference/get_friction_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"Get friction surface — get_friction_surface","title":"Get friction surface — get_friction_surface","text":"Wrapper function download friction surfaces via malariaAtlas::getRaster","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/get_friction_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get friction surface — get_friction_surface","text":"","code":"get_friction_surface(   surface = c(\"motor2020\", \"walk2020\"),   filename = NULL,   overwrite = FALSE,   extent = NULL )"},{"path":"https://idem-lab.github.io/traveltime/reference/get_friction_surface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get friction surface — get_friction_surface","text":"surface \"motor2020\" \"walk2020. filename character. File name output layer. overwrite Overwrite filename exists extent Spatial extent either numeric vector specifying c(xmin, xmax, ymin, ymax), SpatExtent, SpatVector SpatRaster (extent taken), 2x2 matrix (see details).","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/get_friction_surface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get friction surface — get_friction_surface","text":"SpatRaster","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/get_friction_surface.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get friction surface — get_friction_surface","text":"Convenience wrapper malariaAtlas::getRaster access motorised walking travel friction layers per Weiss et al. 2020, adds safety check existing files download. Surfaces can downloaded directly : https://malariaatlas.org/project-resources/accessibility--healthcare/ surface = \"motor2020\" downloads \"Explorer__2020_motorized_friction_surface\". surface = \"walk2020\" downloads \"Explorer__2020_walking_only_friction_surface\". D. J. Weiss, . Nelson, C. . Vargas-Ruiz, K. Gligoric, S., Bavadekar, E. Gabrilovich, . Bertozzi-Villa, J. Rozier, H. S. Gibson, T., Shekel, C. Kamath, . Lieber, K. Schulman, Y. Shao, V. Qarkaxhija, . K. Nandi, S. H. Keddie, S. Rumisha, P. Amratia, R. Arambepola, E. G. Chestnutt, J. J. Millar, T. L. Symons, E. Cameron, K. E. Battle, S. Bhatt, P. W. Gething. Global maps travel time healthcare facilities. (2020) Nature Medicine. https://doi.org/10.1038/s41591-020-1059-1 extent passed pass malariaAtlas::getRaster 2x2 matrix. passed numeric vector, SpatExtent, SpatVector, SpatRaster, converted matrix using ext_vect_to_matrix ext_from_terra. matrix format  returned sf::st_bbox() - first column minimum, second maximum values; rows 1 & 2 represent x & y dimensions respectively (matrix(c(\"xmin\", \"ymin\",\"xmax\", \"ymax\"), nrow = 2, ncol = 2, dimnames = list(c(\"x\", \"y\"), c(\"min\", \"max\")))) (use either shp extent; neither specified global raster returned). NULL extent downloads (large) global layer. Additional details...","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/get_friction_surface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get friction surface — get_friction_surface","text":"","code":"ext <- matrix(   data = c(111, 0, 112, 1),   nrow = 2,   ncol = 2,   dimnames = list(     c(\"x\", \"y\"),     c(\"min\", \"max\")    )  )   get_friction_surface(    surface = \"motor2020\",    extent = ext  ) #> Checking if the following Surface-Year combinations are available to download: #>  #>     DATASET ID  YEAR  #>   - Explorer__2020_motorized_friction_surface:  DEFAULT  #>  #> <GMLEnvelope> #> ....|-- lowerCorner: 0 111 #> ....|-- upperCorner: 1 112Start tag expected, '<' not found #> class       : SpatRaster  #> dimensions  : 120, 120, 1  (nrow, ncol, nlyr) #> resolution  : 0.008333333, 0.008333333  (x, y) #> extent      : 111, 112, 0, 1  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source      : Explorer__2020_motorized_friction_surface_0,111,1,112.tif  #> name        : friction_surface"},{"path":"https://idem-lab.github.io/traveltime/reference/stations.html","id":null,"dir":"Reference","previous_headings":"","what":"Singapore MRT and LRT data — stations","title":"Singapore MRT and LRT data — stations","text":"Locations MRT LRT station exits Singapore.","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/stations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Singapore MRT and LRT data — stations","text":"","code":"stations"},{"path":[]},{"path":"https://idem-lab.github.io/traveltime/reference/stations.html","id":"stations-a-data-frame-with-rows-and-columns-","dir":"Reference","previous_headings":"","what":"stations A data frame with 563 rows and 2 columns:","title":"Singapore MRT and LRT data — stations","text":"x longitude y latitude","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/stations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Singapore MRT and LRT data — stations","text":"Land Transport Authority. (2019). LTA MRT Station Exit (GEOJSON) (2024) Dataset. data.gov.sg. Retrieved December 10, 2024 https://data.gov.sg/datasets/d_b39d3a0871985372d7e1637193335da5/view","code":""},{"path":"https://idem-lab.github.io/traveltime/reference/traveltime-package.html","id":null,"dir":"Reference","previous_headings":"","what":"traveltime: Calculate Travel Times Over Space — traveltime-package","title":"traveltime: Calculate Travel Times Over Space — traveltime-package","text":"Calculate travel time friction surface specified set locations.","code":""},{"path":[]},{"path":"https://idem-lab.github.io/traveltime/reference/traveltime-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"traveltime: Calculate Travel Times Over Space — traveltime-package","text":"Maintainer: Gerry Ryan gerard.ryan@telethonkids.org.au (ORCID) Authors: Daniel Weiss (ORCID) contributors: Nicholas Tierney (ORCID) [contributor]","code":""}]
